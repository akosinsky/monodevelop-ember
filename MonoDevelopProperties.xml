<MonoDevelopProperties version="2.0">
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.IterateViaForeachAction" value="True" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.ConcatenationAllocationAnalyzer.HeapAnalyzerStringConcatRule.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ParameterHidesMemberAnalyzer.RECS0082.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.InvokeAsStaticMethodCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.OptionalParameterRefOutAnalyzer.RECS0028.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.Diagnostics.CSharpUnboundIdentifiersDiagnosticAnalyzer.IDE1007.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithSimpleAssignmentAnalyzer.RECS0049.enabled" value="True" />
  <Property key="MonoDevelop.DesignerSupport.ClassOutline.GroupOrder" value="" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithOfTypeWhereAnalyzer.RECS0048.enabled" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.ConvertIfToSwitch.CSharpConvertIfToSwitchCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RemoveRedundantOrStatementAnalyzer.RECS0076.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithOfTypeAnyAnalyzer.RECS0039.enabled" value="True" />
  <Property key="FontProperties" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.ExplicitAllocationAnalyzer.HeapAnalyzerExplicitNewArrayRule.severity" value="Info" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantPrivateAnalyzer.RECS0145.severity" value="Hidden" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.AddAnotherAccessorCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.EnumUnderlyingTypeIsIntAnalyzer.RECS0007.enabled" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.CodeRefactorings.InlineTemporary.InlineTemporaryCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantExplicitNullableCreationAnalyzer.RECS0138.enabled" value="True" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.ExplicitAllocationAnalyzer.HeapAnalyzerExplicitNewObjectRule.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithSingleCallToCountAnalyzer.RECS0051.enabled" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.ReplacePropertyWithMethods.ReplacePropertyWithMethodsCodeRefactoringProvider" value="True" />
  <Property key="MonoDevelop.Projects.Text.ConversionEncodings" value="" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.RemoveUnreachableCode.CSharpRemoveUnreachableCodeDiagnosticAnalyzer.IDE0035.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.InlineDeclaration.CSharpInlineDeclarationDiagnosticAnalyzer.IDE0018.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithOfTypeFirstOrDefaultAnalyzer.RECS0042.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.FlipOperatorArgumentsCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.RemoveUnnecessaryImports.CSharpRemoveUnnecessaryImportsDiagnosticAnalyzer.IDE0005.severity" value="Hidden" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ParameterOnlyAssignedAnalyzer.RECS0099.enabled" value="True" />
  <Property key="Monodevelop.TaskListTokens" value="FIXME:2;TODO:1;HACK:1;UNDONE:0" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.SealedMemberInSealedClassAnalyzer.RECS0008.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.StringCompareToIsCultureSpecificAnalyzer.RECS0064.enabled" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.ReplaceMethodWithProperty.ReplaceMethodWithPropertyCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.FormatStringProblemAnalyzer.RECS0155.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplaceDirectCastWithSafeCastCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ConvertConditionalTernaryToNullCoalescingAnalyzer.RECS0010.enabled" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.ConvertAutoPropertyToFullProperty.CSharpConvertAutoPropertyToFullPropertyCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantStringToCharArrayCallAnalyzer.RECS0123.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.LocalVariableHidesMemberAnalyzer.RECS0117.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.UseExpressionBody.UseExpressionBodyDiagnosticAnalyzer.IDE0021.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.NotImplementedExceptionAnalyzer.RECS0083.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpIsAndCastCheckDiagnosticAnalyzer.IDE0020.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.Diagnostics.AddBraces.CSharpAddBracesDiagnosticAnalyzer.IDE0011.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantEmptyFinallyBlockAnalyzer.RECS0118.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.EmptyGeneralCatchClauseAnalyzer.RECS0022.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertMultiplyToShiftCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.InitializeReadOnlyAutoPropertyFromConstructorParameterCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.PossibleMistakenCallToGetTypeAnalyzer.RECS0035.enabled" value="True" />
  <Property key="MonoDevelop.Debugger.DebuggingService.GroupPrivateMembers" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.UseInferredMemberName.CSharpUseInferredMemberNameDiagnosticAnalyzer.IDE0037.enabled" value="True" />
  <Property key="MonoDevelop.Debugger.DebuggingService.ProjectAssembliesOnly" value="False" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.NonPublicMethodWithTestAttributeAnalyzer.RECS0009.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.AddAccessibilityModifiers.CSharpAddAccessibilityModifiersDiagnosticAnalyzer.IDE0040.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.BaseMethodParameterNameMismatchAnalyzer.RECS0133.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CreateEventInvocatorCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.AddOptionalParameterToInvocationCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CheckIfParameterIsNullCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.EmptyEmbeddedStatementAnalyzer.RECS0034.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CreateDelegateAction" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantAttributeParenthesesAnalyzer.RECS0071.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertEqualityOperatorToEqualsCodeRefactoringProvider" value="True" />
  <Property key="MonoDevelop.Ide.AddinUpdater.TestMode" value="" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.CallSiteImplicitAllocationAnalyzer.HeapAnalyzerImplicitParamsRule.severity" value="Warning" />
  <Property key="SharpDevelop.Workbench.WorkbenchMemento">
    <Property key="windowState" value="Maximized" />
    <Property key="fullscreen" value="False" />
    <Property key="bounds" value="50, 50, 1340, 720" />
  </Property>
  <Property key="CodeIssues.System.String[].MonoDevelop.CSharp.Diagnostics.MonoTODODiagnostic.MonoTODODiagnosticAnalyzer.XS0001.severity" value="Warning" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertIfStatementToNullCoalescingExpressionAction" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.MoveDeclarationNearReference.CSharpMoveDeclarationNearReferenceCodeRefactoringProvider" value="True" />
  <Property key="MonoDevelop.Debugger.DebuggingService.AllowToStringCalls" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.NegateLogicalExpressionCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.AccessToStaticMemberViaDerivedTypeAnalyzer.RECS0030.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithOfTypeLastAnalyzer.RECS0043.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantTernaryExpressionAnalyzer.RECS0075.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.SimplifyConditionalTernaryExpressionAnalyzer.RECS0059.enabled" value="True" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.DisplayClassAllocationAnalyzer.HeapAnalyzerClosureCaptureRule.severity" value="Warning" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.MemberHidesStaticFromOuterClassAnalyzer.RECS0146.enabled" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.GenerateEqualsAndGetHashCodeFromMembers.GenerateEqualsAndGetHashCodeFromMembersCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantObjectCreationArgumentListAnalyzer.RECS0104.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.XmlDocAnalyzer.RECS0081.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ValueParameterNotUsedAnalyzer.RECS0029.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CreateOverloadWithoutParameterCodeRefactoringProvider" value="True" />
  <Property key="Monodevelop.FileSelector.LastPattern" value="*" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.DoNotCallOverridableMethodsInConstructorAnalyzer.RECS0021.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.InitializeFieldFromConstructorParameterCodeRefactoringProvider" value="True" />
  <Property key="MonoDevelop.Core.Assemblies.UserAssemblyContext">
    <ArrayOfString xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
  </Property>
  <Property key="Monodevelop.CommentTasksColumns" value="TRUE;TRUE;TRUE;TRUE" />
  <Property key="MonoDevelop.Ide.AddinUpdater.CheckForUpdates" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ForControlVariableIsNeverModifiedAnalyzer.RECS0130.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantCheckBeforeAssignmentAnalyzer.RECS0134.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer.IDE0019.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ConstantNullCoalescingConditionAnalyzer.RECS0098.enabled" value="True" />
  <Property key="Editor.ZoomLevel" value="0.8264462451662552" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.StringLastIndexOfIsCultureSpecificAnalyzer.RECS0062.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.NegateIsExpressionCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.Diagnostics.TypeStyle.CSharpUseExplicitTypeDiagnosticAnalyzer.IDE0008.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.EmptyNamespaceAnalyzer.RECS0006.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ObjectCreationAsStatementAnalyzer.RECS0026.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.SuggestUseVarKeywordEvidentAnalyzer.RECS0091.severity" value="Hidden" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertForToWhileCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.UseObjectInitializer.CSharpUseObjectInitializerDiagnosticAnalyzer.IDE0017.severity" value="Info" />
  <Property key="MonoDevelop.Core.LastRunVersion" value="7.4" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ForStatementConditionIsTrueAnalyzer.RECS0068.enabled" value="True" />
  <Property key="PackageManagementSettings">
    <Property key="CheckUpdatedPackagesOnOpeningSolution" value="True" />
    <Property key="AutomaticPackageRestoreOnOpeningSolution" value="True" />
  </Property>
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertAutoPropertyToPropertyCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.GenerateDefaultConstructors.GenerateDefaultConstructorsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertReferenceEqualsToEqualityOperatorCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ConvertIfToAndExpressionAnalyzer.RECS0093.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.FlipRelationalOperatorArgumentsCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantToStringCallAnalyzer.RECS0106.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.UseCoalesceExpression.CSharpUseCoalesceExpressionForNullableDiagnosticAnalyzer.IDE0030.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.UseObjectInitializer.CSharpUseObjectInitializerDiagnosticAnalyzer.IDE0017.enabled" value="True" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.ConcatenationAllocationAnalyzer.HeapAnalyzerStringConcatRule.severity" value="Warning" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.SplitDeclarationListCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.UseNullPropagation.CSharpUseNullPropagationDiagnosticAnalyzer.IDE0031.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.BitwiseOperatorOnEnumWithoutFlagsAnalyzer.RECS0016.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithOfTypeCountAnalyzer.RECS0040.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertHasFlagsToBitwiseFlagComparisonCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.RemoveBracesCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.NameOfSuggestionAnalyzer.RECS0163.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.UseMethodAnyAnalyzer.RECS0116.severity" value="Info" />
  <Property key="Monodevelop.StackTrace.ShowParameterType" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertStatementBodyToExpressionBodyCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.BaseMemberHasParamsAnalyzer.RECS0031.enabled" value="True" />
  <Property key="MonoDevelop.Debugger.DebuggingService.StepOverPropertiesAndOperators" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithStringIsNullOrEmptyAnalyzer.RECS0127.enabled" value="True" />
  <Property key="MonoDevelop.DesignerSupport.ClassOutline.IsGrouped" value="False" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ToAbstractVirtualNonVirtualConversionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.PartialTypeWithSinglePartAnalyzer.RECS0001.enabled" value="True" />
  <Property key="AutoSetPatternCasing" value="False" />
  <Property key="MonoDevelop.FileSelector.LastPath" value="/root/projects/mono/Generation Service" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertTernaryExpressionToIfStatementCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.ValidateFormatString.CSharpValidateFormatStringDiagnosticAnalyzer.IDE0035.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertForeachToForCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertImplicitToExplicitImplementationCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithSingleCallToFirstOrDefaultAnalyzer.RECS0053.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplaceSafeCastWithDirectCastCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.DisplayClassAllocationAnalyzer.HeapAnalyzerClosureCaptureRule.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantDefaultFieldInitializerAnalyzer.RECS0122.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertLambdaBodyExpressionToStatementCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CheckCollectionIndexValueCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.Diagnostics.NamingStyles.CSharpNamingStyleDiagnosticAnalyzer.IDE1006.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CheckStringIndexValueCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertExplicitToImplicitImplementationCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.GenerateSwitchLabelsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertSwitchToIfCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.UseExpressionBody.UseExpressionBodyCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.PartialMethodParameterNameMismatchAnalyzer.RECS0136.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.UseAsAndNullCheckCodeRefactoringProvider" value="True" />
  <Property key="MonoDevelop.Ide.BeforeCompileAction" value="Nothing" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.Custom.AvoidAsyncVoidAnalyzer.RECS0165.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.OrderModifiers.CSharpOrderModifiersDiagnosticAnalyzer.IDE0036.severity" value="Hidden" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.UseCoalesceExpression.CSharpUseCoalesceExpressionDiagnosticAnalyzer.IDE0029.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithSingleCallToLastOrDefaultAnalyzer.RECS0055.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.IDE0002.enabled" value="True" />
  <Property key="MonoDevelop.Ide.AddinUpdater.LastCheck" value="05/28/2018 12:20:45" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.OrderModifiers.CSharpOrderModifiersDiagnosticAnalyzer.IDE0036.enabled" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CodeRefactorings.MoveType.MoveTypeCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.StringStartsWithIsCultureSpecificAnalyzer.RECS0063.severity" value="Warning" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.DelegateSubtractionAnalyzer.RECS0020.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantEmptyDefaultSwitchBranchAnalyzer.RECS0074.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplacePostfixExpressionWithAssignmentCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.MergeNestedIfAction" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.StringStartsWithIsCultureSpecificAnalyzer.RECS0063.enabled" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.ExtractInterface.ExtractInterfaceCodeRefactoringProvider" value="True" />
  <Property key="MonoDevelop.Ide.AddinUpdater.UpdateSpanValue" value="1" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CheckDictionaryKeyValueCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertBitwiseFlagComparisonToHasFlagsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ContractEnsuresNotNullReturnCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.ExplicitAllocationAnalyzer.HeapAnalyzerImplicitNewArrayCreationRule.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithOfTypeAnalyzer.RECS0038.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithOfTypeFirstAnalyzer.RECS0041.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantDelegateCreationAnalyzer.RECS0164.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ConvertIfDoToWhileAnalyzer.RECS0032.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ConvertClosureToMethodGroupAnalyzer.RECS0002.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.SuggestUseVarKeywordEvidentAnalyzer.RECS0091.enabled" value="True" />
  <Property key="MonoDevelop.GtkCore.ShowNonContainerWarning" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.UnusedParameterAnalyzer.RECS0154.enabled" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.ConvertToInterpolatedString.CSharpConvertConcatenationToInterpolatedStringRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithOfTypeLongCountAnalyzer.RECS0045.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.InvertIfCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.UseSystemStringEmptyCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.EmptyDestructorAnalyzer.RECS0005.enabled" value="True" />
  <Property key="MonoDevelop.Debugger.DebuggingService.GroupStaticMembers" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithSingleCallToLongCountAnalyzer.RECS0056.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.ConvertUnitTestToVB" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertMethodGroupToLambdaCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantAnonymousTypePropertyNameAnalyzer.RECS0069.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CopyCommentsFromBaseCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.UseStringFormatAction" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithSingleCallToSingleAnalyzer.RECS0057.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.AddNewFormatItemCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.CompareNonConstrainedGenericWithNullAnalyzer.RECS0017.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithSingleCallToAnyAnalyzer.RECS0050.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithOfTypeSingleAnalyzer.RECS0046.enabled" value="True" />
  <Property key="AutoFormatDocumentOnSave" value="False" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.EmptyGeneralCatchClauseAnalyzer.RECS0022.severity" value="Warning" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.DisplayClassAllocationAnalyzer.HeapAnalyzerClosureSourceRule.severity" value="Warning" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.DisplayClassAllocationAnalyzer.HeapAnalyzerClosureSourceRule.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantIfElseBlockAnalyzer.RECS0147.enabled" value="True" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.ExplicitAllocationAnalyzer.HeapAnalyzerInitializerCreationRule.severity" value="Info" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithOfTypeSingleOrDefaultAnalyzer.RECS0047.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ConvertIfStatementToSwitchStatementAnalyzer.RECS0012.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantUnsafeContextAnalyzer.RECS0158.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertAnonymousMethodToLambdaCodeRefactoringProvider" value="True" />
  <Property key="Monodevelop.StackTrace.ShowParameterName" value="True" />
  <Property key="CodeActions.C#.MonoDevelop.CSharp.CodeRefactorings.IntroduceVariable.SortImportsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplaceVarWithExplicitTypeCodeRefactoringProvider" value="True" />
  <Property key="MonoDevelop.Ide.BuildBeforeExecuting" value="False" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ConstantConditionAnalyzer.RECS0110.enabled" value="True" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.ExplicitAllocationAnalyzer.HeapAnalyzerLetClauseRule.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.IDE0002.severity" value="Hidden" />
  <Property key="MonoDevelop.Core.Gui.CurrentWorkbenchLayout" value="Solution" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.RemoveUnnecessaryImports.CSharpRemoveUnnecessaryImportsDiagnosticAnalyzer.IDE0005.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CheckArrayIndexValueCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.MethodOverloadWithOptionalParameterAnalyzer.RECS0137.enabled" value="True" />
  <Property key="MonoDevelop.Debugger.DebuggingService.AllowTargetInvoke" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.UseDefaultLiteral.CSharpUseDefaultLiteralDiagnosticAnalyzer.IDE0034.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.StringIndexOfIsCultureSpecificAnalyzer.RECS0060.severity" value="Warning" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithLastOrDefaultAnalyzer.RECS0037.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.UseSystemEnvironmentNewLineCodeRefactoringProvider" value="True" />
  <Property key="Monodevelop.StackTrace.ShowModuleName" value="False" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.TypeConversionAllocationAnalyzer.HeapAnalyzerBoxingRule.severity" value="Warning" />
  <Property key="CodeActions.C#.MonoDevelop.RegexToolkit.CodeRefactorings.ValidateActionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.InitializeParameter.CSharpInitializeMemberFromParameterCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.UnusedTypeParameterAnalyzer.RECS0096.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.UseIsNullCheck.CSharpUseIsNullCheckDiagnosticAnalyzer.IDE0041.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.JoinLocalVariableDeclarationAndAssignmentCodeRefactoringProvider" value="True" />
  <Property key="FavoriteRecentFiles">
    <ArrayOfString xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
  </Property>
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.JoinStringCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithOfTypeLastOrDefaultAnalyzer.RECS0044.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertShiftToMultiplyCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantCommaInArrayInitializerAnalyzer.RECS0113.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithFirstOrDefaultAnalyzer.RECS0036.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.StaticFieldOrAutoPropertyInGenericTypeAnalyzer.RECS0108.enabled" value="True" />
  <Property key="MonoDevelop.DesignerSupport.ClassOutline.IsSorted" value="False" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReverseDirectionForForLoopCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.AutoLinqSumAction" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.AddFileBanner.CSharpAddFileBannerCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.UseLocalFunction.CSharpUseLocalFunctionDiagnosticAnalyzer.IDE0039.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantInternalAnalyzer.RECS0129.enabled" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.InitializeParameter.CSharpAddParameterCheckCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantCaseLabelAnalyzer.RECS0073.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ExtractWhileConditionToInternalIfStatementCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.RemoveRegionEndRegionDirectivesCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertCoalescingToConditionalExpressionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CodeRefactorings.IntroduceVariable.IntroduceVariableCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertEqualsToEqualityOperatorCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplaceOperatorAssignmentWithAssignmentCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.OperatorIsCanBeUsedAnalyzer.RECS0027.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.Diagnostics.RemoveUnnecessaryCast.CSharpRemoveUnnecessaryCastDiagnosticAnalyzer.IDE0004.severity" value="Hidden" />
  <Property key="Monodevelop.StackTrace.ColumnsVisibility" value="" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.LongLiteralEndingLowerLAnalyzer.RECS0024.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.UseCollectionInitializer.CSharpUseCollectionInitializerDiagnosticAnalyzer.IDE0028.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.RemoveUnnecessaryImports.CSharpRemoveUnnecessaryImportsDiagnosticAnalyzer.RemoveUnnecessaryImportsFixable.severity" value="Hidden" />
  <Property key="MonoDevelop.Ide.ExtensibleTreeView.Zoom.MonoDevelop.UnitTesting.TestPad" value="1" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.ExplicitAllocationAnalyzer.HeapAnalyzerExplicitNewObjectRule.severity" value="Info" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplaceExplicitTypeWithVarCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.AddConstructorParametersFromMembers.AddConstructorParametersFromMembersCodeRefactoringProvider" value="True" />
  <Property key="Monodevelop.StackTrace.ShowParameterValue" value="False" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ThreadStaticAtInstanceFieldAnalyzer.RECS0157.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.InsertAnonymousMethodSignatureCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.RemoveUnnecessaryImports.CSharpRemoveUnnecessaryImportsDiagnosticAnalyzer.RemoveUnnecessaryImportsFixable.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplaceWithOperatorAssignmentCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.MonoDevelop.CSharp.CodeRefactorings.IntroduceVariable.SortAndRemoveImportsCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.NonReadonlyReferencedInGetHashCodeAnalyzer.RECS0025.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.AddNullCheckCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertDoWhileToWhileLoopCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ConvertNullableToShortFormAnalyzer.RECS0013.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ConvertIfToOrExpressionAnalyzer.RECS0033.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.RemoveCatchExceptionCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.QualifyMemberAccess.CSharpQualifyMemberAccessDiagnosticAnalyzer.IDE0009.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertIfStatementToSwitchStatementCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.GenerateConstructorFromMembers.GenerateConstructorFromMembersCodeRefactoringProvider" value="True" />
  <Property key="MonoDevelop.Debugger.DebuggingService.FlattenHierarchy" value="False" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ExtractAnonymousMethodCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantPrivateAnalyzer.RECS0145.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.InitializeAutoPropertyFromConstructorParameterCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantExplicitArraySizeAnalyzer.RECS0103.enabled" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.UseNamedArguments.CSharpUseNamedArgumentsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertLambdaToAnonymousMethodCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ConvertToStaticTypeAnalyzer.RECS0014.enabled" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.EncapsulateField.EncapsulateFieldRefactoringProvider" value="True" />
  <Property key="MonoDevelop.Ide.AddinUpdater.UpdateSpanUnit" value="Day" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.ConvertToInterpolatedString.CSharpConvertPlaceholderToInterpolatedStringRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.UseDeconstruction.CSharpUseDeconstructionDiagnosticAnalyzer.IDE0042.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.EventUnsubscriptionViaAnonymousDelegateAnalyzer.RECS0023.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.IDE0001.severity" value="Hidden" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ConditionIsAlwaysTrueOrFalseAnalyzer.RECS0065.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.SplitIfWithOrConditionInTwoCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertIfStatementToReturnStatementAction" value="True" />
  <Property key="MonoDevelop.Core.LastRunRevision" value="5" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.PutInsideUsingAction" value="True" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.ExplicitAllocationAnalyzer.HeapAnalyzerExplicitNewArrayRule.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.EmptyConstructorAnalyzer.RECS0004.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.UseMethodAnyAnalyzer.RECS0116.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.EqualExpressionComparisonAnalyzer.RECS0088.enabled" value="True" />
  <Property key="MonoDevelop.Debugger.DebuggingService.EvaluationTimeout" value="2500" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.GenerateOverrides.GenerateOverridesCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithSingleCallToAnyAnalyzer.RECS0050.severity" value="Info" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.SplitStringCodeRefactoringProvider" value="True" />
  <Property key="MonoDevelop.Ide.ExtensibleTreeView.Zoom.ProjectPad" value="1" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ArrayCreationCanBeReplacedWithArrayInitializerAnalyzer.RECS0085.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.AddCatchExceptionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertWhileToDoWhileLoopCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.UseExplicitTupleName.UseExplicitTupleNameDiagnosticAnalyzer.IDE0033.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantObjectCreationArgumentListAnalyzer.RECS0104.severity" value="Hidden" />
  <Property key="Monodevelop.StackTrace.ShowLineNumber" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.StringIndexOfIsCultureSpecificAnalyzer.RECS0060.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.Diagnostics.Analyzers.CSharpPreferFrameworkTypeDiagnosticAnalyzer.IDE0014.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.StringEndsWithIsCultureSpecificAnalyzer.RECS0061.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.DoubleNegationOperatorAnalyzer.RECS0066.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithSingleCallToSingleOrDefaultAnalyzer.RECS0058.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithSingleCallToLastAnalyzer.RECS0054.enabled" value="True" />
  <Property key="XmlEditor.AddIn.Options">
    <Property key="AutoInsertFragment" value="True" />
    <Property key="ShowSchemaAnnotation" value="False" />
    <Property key="AutoCompleteElements" value="False" />
  </Property>
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.ConvertInstanceToStaticMethodCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertLambdaStatementToExpressionCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantBaseQualifierAnalyzer.RECS0072.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplaceAssignmentWithPostfixExpressionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertExpressionBodyToStatementBodyCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CheckStringBuilderIndexValueCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.UseThrowExpression.CSharpUseThrowExpressionDiagnosticAnalyzer.IDE0016.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantBaseConstructorCallAnalyzer.RECS0126.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ConditionalTernaryEqualBranchAnalyzer.RECS0019.enabled" value="True" />
  <Property key="WelcomePage.UpdateFromInternet" value="True" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.CallSiteImplicitAllocationAnalyzer.HeapAnalyzerImplicitParamsRule.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertIfStatementToConditionalTernaryExpressionCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.PublicConstructorInAbstractClassAnalyzer.RECS0120.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertHexToDecCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.FieldCanBeMadeReadOnlyAnalyzer.RECS0092.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.Diagnostics.RemoveUnnecessaryCast.CSharpRemoveUnnecessaryCastDiagnosticAnalyzer.IDE0004.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantToStringCallAnalyzer.RECS0106.severity" value="Hidden" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.Diagnostics.AddBraces.CSharpAddBracesDiagnosticAnalyzer.IDE0011.severity" value="Hidden" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.NotResolvedInTextAnalyzer.RECS0143.enabled" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.PopulateSwitch.PopulateSwitchDiagnosticAnalyzer.IDE0010.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ImportStaticClassWithUsingCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.SplitIfWithAndConditionInTwoCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.CompareOfFloatsByEqualityOperatorAnalyzer.RECS0018.enabled" value="True" />
  <Property key="MonoDevelop.Core.FirstRun" value="False" />
  <Property key="MonoDevelop.Ide.AddinUpdater.UpdateLevel" value="Stable" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertInterpolatedStringToStringFormatCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.InvokeAsExtensionMethodAnalyzer.RECS0015.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.EmptyStatementAnalyzer.RECS0067.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.SplitLocalVariableDeclarationAndAssignmentCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.Diagnostics.TypeStyle.CSharpUseImplicitTypeDiagnosticAnalyzer.IDE0007.enabled" value="True" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.ExplicitAllocationAnalyzer.HeapAnalyzerInitializerCreationRule.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertDecToHexCodeRefactoringProvider" value="True" />
  <Property key="MonoDevelop.Ide.BuildWithMSBuild" value="True" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.IDE0001.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.AddBracesCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.BaseMethodCallWithDefaultParameterAnalyzer.RECS0003.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ChangeAccessModifierAction" value="True" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.EnumeratorAllocationAnalyzer.HeapAnalyzerEnumeratorAllocationRule.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ContractRequiresStringNotNullOrEmptyCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.ReplaceWithSingleCallToFirstAnalyzer.RECS0052.enabled" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertMethodGroupToAnonymousMethodCodeRefactoringProvider" value="True" />
  <Property key="ToolboxIsInCompactMode" value="False" />
  <Property key="CodeIssues.System.String[].Microsoft.CodeAnalysis.CSharp.InvokeDelegateWithConditionalAccess.InvokeDelegateWithConditionalAccessAnalyzer.IDE1005.enabled" value="True" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.ExplicitAllocationAnalyzer.HeapAnalyzerImplicitNewArrayCreationRule.severity" value="Info" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.ChangeSignature.ChangeSignatureCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertStringFormatToInterpolatedStringCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.ReplaceDocCommentTextWithTag.CSharpReplaceDocCommentTextWithTagCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.InvertConditionalOperatorCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.AddNameToArgumentCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ContractRequiresNotNullCodeRefactoringProvider" value="True" />
  <Property key="/MonoDevelop/Ide/GlobalOptionsDialog-lastPanel" value="Debugger" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ComputeConstantValueCodeRefactoringProvider" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.CallToObjectEqualsViaBaseAnalyzer.RECS0149.enabled" value="True" />
  <Property key="Monodevelop.ErrorListColumns" value="TRUE;TRUE;TRUE;TRUE;TRUE;TRUE;TRUE;TRUE" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.FlipEqualsTargetAndArgumentCodeRefactoringProvider" value="True" />
  <Property key="MonoDevelop.Projects.GlobalPolicyMimeTypes" value="" />
  <Property key="CodeIssues.System.String[].MonoDevelop.CSharp.Diagnostics.MonoTODODiagnostic.MonoTODODiagnosticAnalyzer.XS0001.enabled" value="True" />
  <Property key="CodeIssues.System.String[].RefactoringEssentials.CSharp.Diagnostics.RedundantArgumentNameAnalyzer.RECS0070.enabled" value="True" />
  <Property key="CodeIssues.System.String[].ClrHeapAllocationAnalyzer.TypeConversionAllocationAnalyzer.HeapAnalyzerBoxingRule.enabled" value="True" />
  <Property key="CodeActions.C#.Microsoft.CodeAnalysis.CSharp.ConvertNumericLiteral.CSharpConvertNumericLiteralCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CreateChangedEventCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.GenerateGetterAction" value="True" />
  <Property key="MonoDevelop.Debugger.DebuggingService.DebuggerLogging" value="False" />
  <Property key="MonoDevelop.TextEditor.Document.Document.DefaultDocumentAggregatorProperties" />
  <Property key="Monodevelop.TaskList.ActiveView" value="MonoDevelop.Ide.Tasks.CommentTasksView" />
  <Property key="ScrollBar.Mode" value="Overview" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ConvertEqualityOperatorToReferenceEqualsCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplaceAutoPropertyWithPropertyAndBackingFieldCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.CreateCustomEventImplementationAction" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.AddExceptionDescriptionCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.ReplacePropertyWithBackingFieldWithAutoPropertyCodeRefactoringProvider" value="True" />
  <Property key="CodeActions.C#.RefactoringEssentials.CSharp.CodeRefactorings.InvertLogicalExpressionCodeRefactoringProvider" value="True" />
</MonoDevelopProperties>